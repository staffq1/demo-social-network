{"version":3,"file":"static/js/672.348c48f0.chunk.js","mappings":"yKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,6BCShL,EANmB,SAACA,GAChB,OAAO,gBAAKC,UAA2BC,EAAAA,OAAhC,UACH,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCCpD,EAJgB,SAACL,GACb,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAAkCF,EAAMK,Q,iDC2C7CC,GAAYC,EAAAA,EAAAA,GAAiB,IAa7BC,GAAsBC,EAAAA,EAAAA,GAAU,CAClCC,KAAM,wBADkBD,EAXL,SAACT,GAEpB,OAAO,kBAAMW,SAAUX,EAAMY,aAAtB,WACH,0BACA,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAYD,KAAK,iBAAiBa,YAAY,aAG/F,0BAAK,oDAQb,EAtDgB,SAAClB,GAEb,IAAImB,EAAQnB,EAAMoB,YAEdC,EAAkBF,EAAMG,WAAWC,KAAI,SAAAC,GAAS,OAAI,SAAC,EAAD,CAAYnB,KAAMmB,EAAUnB,KAA2BD,GAAIoB,EAAUpB,IAA9BoB,EAAUnB,SACrGoB,EAAmBN,EAAMO,YAAYH,KAAI,SAAAI,GAAW,OAAI,SAAC,EAAD,CAAStB,KAAMsB,EAAYC,SAAcD,EAAYC,YAiBjH,OAAK5B,EAAM6B,QAGP,iBAAK5B,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKmB,KAEL,iBAAKpB,UAAWC,EAAAA,SAAhB,WACI,yBAAMuB,KACN,SAACjB,EAAD,CAAqBG,SAdb,SAACmB,GAEjB9B,EAAM+B,YAAYD,EAAME,0BAGF,SAAC,KAAD,CAAU7B,GAAI,Y,UCC5C,GAAe8B,E,QAAAA,KACXC,EAAAA,EAAAA,KA1BkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACe,GACtB,MAAO,CAIHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAcpCK,EAAAA,EAFJ,CAGEC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__YvqoY\",\"dialogsItems\":\"Dialogs_dialogsItems__NZ0B0\",\"active\":\"Dialogs_active__AgEsz\",\"messages\":\"Dialogs_messages__VB7sw\",\"message\":\"Dialogs_message__DIY9s\"};","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport classes from './../Dialogs.module.css'\r\n\r\nconst DialogItem = (props) => {\r\n    return <div className={classes.dialog, classes.active}>\r\n        <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem","import React from \"react\"\r\nimport classes from './../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n    return <div className={classes.message}>{props.name}</div>\r\n}\r\n\r\nexport default Message","import classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport Message from \"./Message/Message\"\r\n// import { sendMessageCreator, updateNewMessageTextCreator } from \"../../redux/dialogs-reducer\"\r\nimport { Navigate } from 'react-router-dom'\r\nimport { Field } from 'redux-form'\r\nimport { reduxForm } from 'redux-form'\r\nimport { Textarea } from '../commen/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsArr.map(dialogObj => <DialogItem name={dialogObj.name} key={dialogObj.name} id={dialogObj.id} />)\r\n    let messagesElements = state.messagesArr.map(messagesObj => <Message name={messagesObj.message} key={messagesObj.message} />)\r\n    // let newMessageText = state.newMessageText\r\n\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage()\r\n    // }\r\n\r\n    // let onNewMessageChange = (ev) => {\r\n    //     let text = ev.target.value\r\n    //     props.updateNewMessageText(text)\r\n    // }\r\n\r\n    let addNewMessage = (value) => {\r\n      \r\n        props.sendMessage(value.newMessageText)\r\n    }\r\n\r\n    if (!props.isAuth) return <Navigate to={'/login'} />\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n        <Field component={Textarea} validate={[required, maxLength]} name='newMessageText' placeholder='Enter'/>\r\n        {/* <Field component={'textarea'} name='newMessageText' placeholder='Enter'/> */}\r\n        </div>\r\n        <div><button>Add message</button></div>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs","import { connect } from \"react-redux\"\r\nimport { sendMessageCreator, \r\n    // updateNewMessageTextCreator\r\n } from \"../../redux/dialogs-reducer\"\r\nimport Dialogs from './Dialogs'\r\nimport { withAuthRedirect } from './../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n        // updateNewMessageText: (text)=>{\r\n        //     dispatch(updateNewMessageTextCreator(text))\r\n        // },\r\n        sendMessage: (newMessageText)=>{\r\n            dispatch(sendMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n// export default DialogsContainer \r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["props","className","classes","to","id","name","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogsArr","map","dialogObj","messagesElements","messagesArr","messagesObj","message","isAuth","value","sendMessage","newMessageText","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}